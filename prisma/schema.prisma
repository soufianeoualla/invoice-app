// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  name          String?
  id            String    @id @default(cuid()) @map(name: "id")
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  invoice       invoice[]
}

enum status {
  draft
  pending
  paid
}

model invoice {
  id            String          @id @default(cuid()) @map(name: "id")
  description   String?
  clientName    String
  clientEmail   String
  total         Float
  status        status          @default(draft)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @default(cuid()) @map(name: "user_id")
  senderAddress senderAddress[]
  clientAddress clientAddress[]
  item          item[]
}

model senderAddress {
  id        Int     @id @default(autoincrement())
  street    String
  city      String
  postCode  String
  country   String
  invoice   invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @default(cuid()) @map(name: "invoice_id")
}

model clientAddress {
  id        Int     @id @default(autoincrement())
  street    String
  city      String
  postCode  String
  country   String
  invoice   invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @default(cuid()) @map(name: "invoice_id")
}

model item {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  total     Float
  invoice   invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @default(cuid()) @map(name: "invoice_id")
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
